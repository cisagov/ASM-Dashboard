import React, { useEffect, useRef, useState } from 'react';
import { useHistory } from 'react-router-dom';
import { ResponsiveBar, BarDatum } from '@nivo/bar';
import { Paper, Tooltip } from '@mui/material';
import { Point } from './Risk';
import * as RiskStyles from './style';
import { getSeverityColor, getServicesColor, getTooltipColor } from './utils';

// Define the type to match the BarDatum structure
interface BarData extends BarDatum {
  id: string;
  value: number;
}

const VulnerabilityBarChart = (props: {
  title: string;
  data: Point[];
  colors: any;
  type: string;
}) => {
  const history = useHistory();
  const { title, data, type } = props;
  const { cardRoot, cardSmall, header, chartSmall } = RiskStyles.classesRisk;
  const [ariaLabel, setAriaLabel] = useState('');
  const ariaLiveRef = useRef<HTMLDivElement>(null);
  const filteredVulnTableLink = '/inventory/vulnerabilities';
  const filteredVulnTableLinkHandler = (
    filteredVulnTableLink: string,
    severity: string
  ) => history.push(filteredVulnTableLink, { severity: severity });

  const CustomBarLayer = ({ bars }: { bars: any[]; [key: string]: any }) => (
    <>
      {bars.map((bar) => (
        <Tooltip
          title={`${bar.data.value} ${bar.data.indexValue} level severities in this organization.`}
          placement="right"
          arrow
          key={bar.index}
        >
          <g key={bar.key}>
            <rect
              role="button"
              key={bar.key}
              x={bar.x}
              y={bar.y}
              width={bar.width}
              height={bar.height}
              fill={bar.color}
              tabIndex={0}
              aria-label={`${bar.data.value} ${bar.data.indexValue} level severities in this organization.`}
              onClick={() => {
                if (type === 'vulns') {
                  filteredVulnTableLinkHandler(
                    `${filteredVulnTableLink}`,
                    `${bar.data.indexValue}`
                  );
                }
              }}
              onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  e.preventDefault();
                  filteredVulnTableLinkHandler(
                    filteredVulnTableLink,
                    bar.data.indexValue
                  );
                }
              }}
            />
          </g>
        </Tooltip>
      ))}
    </>
  );

  // Place null values in "N/A" and capitalize the first letter of each word in the data.
  const titleCaseData: BarData[] = data.map((d) => {
    if (d.id === 'null' || d.id === null || d.id === '') {
      return { id: 'N/A', value: d.value };
    } else {
      return {
        id: d.id[0]?.toUpperCase() + d.id.slice(1)?.toLowerCase(),
        value: d.value
      };
    }
  });

  // Group the data by severity level and "Other". Sum the values for each group.
  const groupedData = titleCaseData
    .map((d) => {
      const severityLevels = [
        'N/A',
        'Low',
        'Medium',
        'High',
        'Critical',
        'Other'
      ];
      if (severityLevels.includes(d.id)) {
        return d;
      } else {
        return { id: 'Other', value: d.value };
      }
    })
    .reduce((acc: { [key: string]: number }, curr) => {
      if (acc[curr.id]) {
        acc[curr.id] += curr.value;
      } else {
        acc[curr.id] = curr.value;
      }
      return acc;
    }, {});

  // Sort the data to ensure "N/A", "Low", "Medium", "High", and "Critical" appear in the desired order
  const sortedData = Object.entries(groupedData)
    .map(([id, value]) => ({ id, value }))
    .sort((a, b) => {
      const order = ['N/A', 'Low', 'Medium', 'High', 'Critical', 'Other'];
      return order.indexOf(a.id) - order.indexOf(b.id);
    });

  useEffect(() => {
    const label =
      `${title} bar chart. ` +
      sortedData
        .map(
          (point) =>
            `${point.id}: ${point.value} (${(
              (point.value /
                sortedData.reduce((acc, curr) => acc + curr.value, 0)) *
              100
            ).toFixed(2)}%)`
        )
        .join(', ');
    setAriaLabel(label);
  }, [title, sortedData]);

  const getColor = (indexValue: string) => {
    const severityColor = getSeverityColor({ id: indexValue });
    const serviceColor = getServicesColor({ id: indexValue });
    const color =
      indexValue === 'N/A' ||
      indexValue === 'Low' ||
      indexValue === 'Medium' ||
      indexValue === 'High' ||
      indexValue === 'Critical' ||
      indexValue === 'Other'
        ? severityColor
        : serviceColor;
    return color;
  };

  const getTextColor = () => getTooltipColor();

  return (
    <Paper elevation={0} className={cardRoot}>
      <div className={cardSmall}>
        <div className={header}>
          <h2>{title}</h2>
        </div>
        <div className={chartSmall} role="img" aria-label={ariaLabel}>
          <div
            ref={ariaLiveRef}
            aria-live="polite"
            style={{
              position: 'absolute',
              width: '1px',
              height: '1px',
              overflow: 'hidden',
              clip: 'rect(1px, 1px, 1px, 1px)'
            }}
          >
            {ariaLabel}
          </div>
          <ResponsiveBar
            data={sortedData}
            keys={['value']}
            indexBy="id"
            margin={{ top: 50, right: 50, bottom: 50, left: 60 }}
            padding={0.3}
            colors={({ indexValue }) => getColor(String(indexValue))} // Ensure indexValue is used
            colorBy="indexValue" // Use indexValue directly for color assignment
            borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}
            axisTop={null}
            axisRight={null}
            axisBottom={{
              tickSize: 5,
              tickPadding: 5,
              tickRotation: 0,
              legend: 'ID',
              legendPosition: 'middle',
              legendOffset: 32
            }}
            axisLeft={{
              tickSize: 5,
              tickPadding: 5,
              tickRotation: 0,
              legend: 'Value',
              legendPosition: 'middle',
              legendOffset: -40
            }}
            labelSkipWidth={12}
            labelSkipHeight={12}
            labelTextColor={getTextColor()}
            isInteractive={true} // Ensure tooltips are enabled
            layers={[
              'grid',
              'axes',
              CustomBarLayer,
              'markers',
              'legends',
              'annotations'
            ]}
            ariaLabel={ariaLabel}
            isFocusable
          />
        </div>
      </div>
    </Paper>
  );
};

export default VulnerabilityBarChart;
