import React, { useEffect, useRef, useState } from 'react';
import { useHistory } from 'react-router-dom';
import { ResponsiveBar, BarDatum } from '@nivo/bar';
import { Paper } from '@mui/material';
import { Point } from './Risk';
import * as RiskStyles from './style';
import { getSeverityColor, getServicesColor } from './utils';

// Define the type to match the BarDatum structure
interface BarData extends BarDatum {
  id: string;
  value: number;
}

const patterns = [
  {
    id: 'dots',
    type: 'patternDots',
    size: 6,
    padding: 2,
    stagger: true
  },
  {
    id: 'stripes',
    type: 'patternLines',
    rotation: 45,
    lineWidth: 6,
    spacing: 10
  },
  {
    id: 'lines',
    type: 'patternLines',
    rotation: -45,
    lineWidth: 6,
    spacing: 10
  }
];

const generatePatternsAndFills = () => {
  return patterns.map((pattern) => ({
    pattern: {
      ...pattern,
      background: 'inherit',
      color: 'rgba(0, 0, 0, 0.25)',
      id: pattern.id
    },
    fill: {
      match: { id: pattern.id },
      id: pattern.id
    }
  }));
};

const VulnerabilityBarChart = (props: {
  title: string;
  data: Point[];
  colors: any;
  type: string;
}) => {
  const history = useHistory();
  const { title, data, type } = props;
  const { cardRoot, cardSmall, header, chartSmall } = RiskStyles.classesRisk;
  const [ariaLabel, setAriaLabel] = useState('');
  const ariaLiveRef = useRef<HTMLDivElement>(null);

  // Map data to BarData structure
  const mappedData: BarData[] = data.map((d) => ({
    id: d.id,
    value: d.value
  }));

  // Sort the data to ensure "Low", "Medium", and "High" appear in the desired order
  const sortedData = [...mappedData].sort((a, b) => {
    const order = ['Low', 'Medium', 'High'];
    return order.indexOf(a.id) - order.indexOf(b.id);
  });

  useEffect(() => {
    const label =
      `${title} bar chart. ` +
      sortedData
        .map(
          (point) =>
            `${point.id}: ${point.value} (${(
              (point.value /
                sortedData.reduce((acc, curr) => acc + curr.value, 0)) *
              100
            ).toFixed(2)}%)`
        )
        .join(', ');
    setAriaLabel(label);
  }, [title, sortedData]);

  const patternsAndFills = generatePatternsAndFills();
  const defs = patternsAndFills.map((pf) => pf.pattern);
  const fill = patternsAndFills.map((pf) => pf.fill);

  const getColor = (id: string) => {
    const severityColor = getSeverityColor({ id });
    const serviceColor = getServicesColor({ id });
    const color =
      id === 'Low' || id === 'Medium' || id === 'High'
        ? severityColor
        : serviceColor;
    return color;
  };

  return (
    <Paper elevation={0} className={cardRoot}>
      <div className={cardSmall}>
        <div className={header}>
          <h2>{title}</h2>
        </div>
        <div className={chartSmall} role="img" aria-label={ariaLabel}>
          <div
            ref={ariaLiveRef}
            aria-live="polite"
            style={{
              position: 'absolute',
              width: '1px',
              height: '1px',
              overflow: 'hidden',
              clip: 'rect(1px, 1px, 1px, 1px)'
            }}
          >
            {ariaLabel}
          </div>
          <ResponsiveBar
            data={sortedData}
            keys={['value']}
            indexBy="id"
            margin={{ top: 50, right: 50, bottom: 50, left: 60 }}
            padding={0.3}
            colors={(datum) => getColor(String(datum.indexValue))} // Ensure indexValue is used
            colorBy="indexValue" // Use indexValue directly for color assignment
            borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}
            axisTop={null}
            axisRight={null}
            axisBottom={{
              tickSize: 5,
              tickPadding: 5,
              tickRotation: 0,
              legend: 'ID',
              legendPosition: 'middle',
              legendOffset: 32
            }}
            axisLeft={{
              tickSize: 5,
              tickPadding: 5,
              tickRotation: 0,
              legend: 'Value',
              legendPosition: 'middle',
              legendOffset: -40
            }}
            labelSkipWidth={12}
            labelSkipHeight={12}
            labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}
            onClick={(datum) => {
              if (type === 'vulns') {
                history.push(
                  `/inventory/vulnerabilities?severity=${datum.indexValue}`
                );
              }
            }}
            defs={defs}
            fill={fill}
            role="img"
            ariaLabel={ariaLabel}
            ariaLabelledBy={title}
            tooltip={({ id, value, color }) => (
              <div
                style={{
                  padding: 12,
                  color,
                  background: '#222222'
                }}
              >
                <strong>
                  {id}: {value}
                </strong>
              </div>
            )}
            layers={[
              'grid',
              'axes',
              'bars',
              'markers',
              'legends',
              'annotations',
              ({ bars }) => (
                <>
                  {bars.map((bar, index) => {
                    const pattern = patterns.find((p) =>
                      p.id.includes(String(bar.data.indexValue))
                    );
                    const patternId = pattern ? pattern.id : '';
                    return (
                      <g
                        key={bar.key}
                        tabIndex={0}
                        role="button"
                        aria-label={`${bar.data.indexValue} severity bar`}
                        onClick={() => {
                          if (type === 'vulns') {
                            history.push(
                              `/inventory/vulnerabilities?severity=${bar.data.indexValue}`
                            );
                          }
                        }}
                      >
                        <rect
                          x={bar.x}
                          y={bar.y}
                          width={bar.width}
                          height={bar.height}
                          fill={bar.color}
                          strokeWidth={2}
                          stroke={bar.color}
                        />
                        {patternId && (
                          <rect
                            x={bar.x}
                            y={bar.y}
                            width={bar.width}
                            height={bar.height}
                            fill={`url(#${patternId})`}
                            fillOpacity={0.4} // Adjust opacity to see the pattern overlay
                          />
                        )}
                      </g>
                    );
                  })}
                </>
              )
            ]}
          />
        </div>
      </div>
    </Paper>
  );
};

export default VulnerabilityBarChart;
