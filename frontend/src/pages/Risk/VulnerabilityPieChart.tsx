// import React from 'react';
// import { useHistory } from 'react-router-dom';
// import { ResponsivePie } from '@nivo/pie';
// import { animated } from '@react-spring/web';
// import { Paper } from '@mui/material';
// import { Point } from './Risk';
// import * as RiskStyles from './style';

// const patterns = [
//   { id: 'dots', type: 'patternDots', size: 3, padding: 2, stagger: false },
//   {
//     id: 'squares',
//     type: 'patternSquares',
//     size: 3,
//     padding: 3,
//     stagger: false
//   },
//   {
//     id: 'lines',
//     type: 'patternLines',
//     rotation: -36,
//     lineWidth: 2,
//     spacing: 10
//   },
//   {
//     id: 'dots-alternate',
//     type: 'patternDots',
//     size: 2,
//     padding: 6,
//     stagger: true
//   },
//   {
//     id: 'lines-alternate',
//     type: 'patternLines',
//     rotation: 25,
//     lineWidth: 6,
//     spacing: 12
//   },
//   {
//     id: 'big-squares',
//     type: 'patternSquares',
//     size: 4,
//     padding: 1,
//     stagger: true
//   }
//   // Add more patterns if needed
// ];

// const generatePatternsAndFills = (data: any[]) => {
//   return data.map((point: { id: any }, index: number) => {
//     const pattern = patterns[index % patterns.length];
//     const patternId = `${pattern.id}-${point.id}`;
//     return {
//       pattern: {
//         ...pattern,
//         background: 'inherit',
//         color: 'rgba(0, 0, 0, 0.25)',
//         id: patternId
//       },
//       fill: {
//         match: { id: point.id },
//         id: patternId
//       }
//     };
//   });
// };

// const VulnerabilityPieChart = (props: {
//   title: string;
//   data: Point[];
//   colors: any;
//   type: string;
// }) => {
//   const history = useHistory();
//   const { title, data, colors, type } = props;
//   const { cardRoot, cardSmall, header, chartSmall } = RiskStyles.classesRisk;

//   const ariaLabel =
//     `${title} pie chart. ` +
//     data
//       .map(
//         (point) =>
//           `${point.id}: ${point.value} (${(
//             (point.value / data.reduce((acc, curr) => acc + curr.value, 0)) *
//             100
//           ).toFixed(2)}%)`
//       )
//       .join(', ');
//   console.log('Data: ', data);
//   const patternsAndFills = generatePatternsAndFills(data);
//   console.log('Paterns and fills: ', patternsAndFills);
//   const defs = patternsAndFills.map((pf: { pattern: any }) => pf.pattern);
//   console.log('Defs: ', defs);
//   const fill = patternsAndFills.map((pf: any) => pf.fill);
//   console.log('Fill: ', fill);

//   return (
//     <Paper elevation={0} className={cardRoot}>
//       <div className={cardSmall}>
//         <div className={header}>
//           <h2>{title}</h2>
//         </div>
//         <div className={chartSmall} role="img" aria-label={ariaLabel}>
//           <ResponsivePie
//             data={data as any}
//             innerRadius={0.5}
//             padAngle={0.7}
//             colors={colors}
//             cornerRadius={3}
//             sortByValue={true}
//             activeOuterRadiusOffset={8}
//             borderWidth={1}
//             borderColor={{
//               from: 'color',
//               modifiers: [['darker', 0.2]]
//             }}
//             margin={{
//               left: 30,
//               right: 50,
//               top: 40,
//               bottom: 50
//             }}
//             onClick={(event) => {
//               if (type === 'vulns') {
//                 history.push(`/inventory/vulnerabilities?severity=${event.id}`);
//               }
//             }}
//             arcLinkLabelsSkipAngle={10}
//             arcLinkLabel={(datum) =>
//               `${datum.id.toLocaleString().toUpperCase()}`
//             }
//             arcLinkLabelsThickness={2}
//             arcLinkLabelsColor={{ from: 'color' }}
//             arcLinkLabelsTextColor={{
//               from: 'color',
//               modifiers: [['darker', 3]]
//             }}
//             arcLabelsSkipAngle={20}
//             arcLabelsRadiusOffset={0.55}
//             arcLabelsTextColor={{
//               from: 'color',
//               modifiers: [['darker', 3]]
//             }}
//             arcLinkLabelsOffset={2}
//             arcLabelsComponent={({ datum, label, style }) => (
//               <animated.g
//                 transform={style.transform}
//                 style={{
//                   pointerEvents: 'none'
//                 }}
//               >
//                 <rect
//                   width="26"
//                   height="16"
//                   x="-12"
//                   y="-8"
//                   rx="5"
//                   ry="5"
//                   fill={style.textColor}
//                   stroke={datum.color}
//                   strokeWidth={3}
//                 />
//                 <rect
//                   alignmentBaseline="middle"
//                   width="25"
//                   height="15"
//                   x="-12"
//                   y="-7"
//                   rx="5"
//                   ry="5"
//                   fill="white"
//                   stroke={datum.color}
//                   strokeWidth={0}
//                 />
//                 <text
//                   textAnchor="middle"
//                   dominantBaseline="central"
//                   fill={style.textColor}
//                   style={{
//                     fontSize: 10,
//                     fontWeight: 1000
//                   }}
//                 >
//                   {label}
//                 </text>
//               </animated.g>
//             )}
//             defs={defs}
//             fill={fill}
//             legends={[
//               {
//                 anchor: 'bottom',
//                 direction: 'row',
//                 justify: false,
//                 translateX: 0,
//                 translateY: 20,
//                 itemsSpacing: 0,
//                 itemWidth: 50,
//                 itemHeight: 10,
//                 itemTextColor: '#999',
//                 itemDirection: 'bottom-to-top',
//                 itemOpacity: 1,
//                 symbolSize: 18,
//                 symbolShape: 'circle',
//                 effects: [
//                   {
//                     on: 'hover',
//                     style: {
//                       itemTextColor: '#000'
//                     }
//                   }
//                 ]
//               }
//             ]}
//             layers={['arcs', 'arcLabels', 'arcLinkLabels']}
//           />
//         </div>
//       </div>
//     </Paper>
//   );
// };

// export default VulnerabilityPieChart;
import React, { useEffect, useRef, useState } from 'react';
import { useHistory } from 'react-router-dom';
import { ResponsivePie } from '@nivo/pie';
import { animated } from '@react-spring/web';
import { Paper, Tooltip } from '@mui/material';
import { Point } from './Risk';
import * as RiskStyles from './style';

const patterns = [
  { id: 'dots', type: 'patternDots', size: 3, padding: 2, stagger: false },
  {
    id: 'squares',
    type: 'patternSquares',
    size: 3,
    padding: 3,
    stagger: false
  },
  {
    id: 'lines',
    type: 'patternLines',
    rotation: -36,
    lineWidth: 2,
    spacing: 10
  },
  {
    id: 'dots-alternate',
    type: 'patternDots',
    size: 2,
    padding: 6,
    stagger: true
  },
  {
    id: 'lines-alternate',
    type: 'patternLines',
    rotation: 25,
    lineWidth: 6,
    spacing: 12
  },
  {
    id: 'big-squares',
    type: 'patternSquares',
    size: 4,
    padding: 1,
    stagger: true
  }
];

const generatePatternsAndFills = (data: any[]) => {
  return data.map((point: { id: any }, index: number) => {
    const pattern = patterns[index % patterns.length];
    const patternId = `${pattern.id}-${point.id}`;
    return {
      pattern: {
        ...pattern,
        background: 'inherit',
        color: 'rgba(0, 0, 0, 0.25)',
        id: patternId
      },
      fill: {
        match: { id: point.id },
        id: patternId
      }
    };
  });
};

const VulnerabilityPieChart = (props: {
  title: string;
  data: Point[];
  colors: any;
  type: string;
}) => {
  const history = useHistory();
  const { title, data, colors, type } = props;
  const { cardRoot, cardSmall, header, chartSmall } = RiskStyles.classesRisk;
  const [ariaLabel, setAriaLabel] = useState('');
  const ariaLiveRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const label =
      `${title} pie chart. ` +
      data
        .map(
          (point) =>
            `${point.id}: ${point.value} (${(
              (point.value / data.reduce((acc, curr) => acc + curr.value, 0)) *
              100
            ).toFixed(2)}%)`
        )
        .join(', ');
    setAriaLabel(label);
  }, [title, data]);

  const patternsAndFills = generatePatternsAndFills(data);
  const defs = patternsAndFills.map((pf: { pattern: any }) => pf.pattern);
  const fill = patternsAndFills.map((pf: any) => pf.fill);

  return (
    <Paper elevation={0} className={cardRoot}>
      <div className={cardSmall}>
        <div className={header}>
          <h2>{title}</h2>
        </div>
        <div className={chartSmall} role="img" aria-label={ariaLabel}>
          <div
            ref={ariaLiveRef}
            aria-live="polite"
            style={{
              position: 'absolute',
              width: '1px',
              height: '1px',
              overflow: 'hidden',
              clip: 'rect(1px, 1px, 1px, 1px)'
            }}
          >
            {ariaLabel}
          </div>
          <ResponsivePie
            data={data as any}
            innerRadius={0.5}
            padAngle={0.7}
            colors={colors}
            cornerRadius={3}
            sortByValue={true}
            activeOuterRadiusOffset={8}
            borderWidth={1}
            borderColor={{
              from: 'color',
              modifiers: [['darker', 0.2]]
            }}
            margin={{
              left: 30,
              right: 50,
              top: 40,
              bottom: 50
            }}
            onClick={(event) => {
              if (type === 'vulns') {
                history.push(`/inventory/vulnerabilities?severity=${event.id}`);
              }
            }}
            arcLinkLabelsSkipAngle={10}
            arcLinkLabel={(datum) =>
              `${datum.id.toLocaleString().toUpperCase()}`
            }
            arcLinkLabelsThickness={2}
            arcLinkLabelsColor={{ from: 'color' }}
            arcLinkLabelsTextColor={{
              from: 'color',
              modifiers: [['darker', 3]]
            }}
            arcLabelsSkipAngle={20}
            arcLabelsRadiusOffset={0.55}
            arcLabelsTextColor={{
              from: 'color',
              modifiers: [['darker', 3]]
            }}
            arcLinkLabelsOffset={2}
            arcLabelsComponent={({ datum, label, style }) => (
              <Tooltip
                title={`This segment represents ${datum.id}. Click to view more details.`}
              >
                <animated.g
                  transform={style.transform}
                  style={{
                    pointerEvents: 'none'
                  }}
                >
                  <rect
                    width="26"
                    height="16"
                    x="-12"
                    y="-8"
                    rx="5"
                    ry="5"
                    fill={style.textColor}
                    stroke={datum.color}
                    strokeWidth={3}
                  />
                  <rect
                    alignmentBaseline="middle"
                    width="25"
                    height="15"
                    x="-12"
                    y="-7"
                    rx="5"
                    ry="5"
                    fill="white"
                    stroke={datum.color}
                    strokeWidth={0}
                  />
                  <text
                    textAnchor="middle"
                    dominantBaseline="central"
                    fill={style.textColor}
                    style={{
                      fontSize: 10,
                      fontWeight: 1000
                    }}
                  >
                    {label}
                  </text>
                </animated.g>
              </Tooltip>
            )}
            defs={defs}
            fill={fill}
            legends={[
              {
                anchor: 'bottom',
                direction: 'row',
                justify: false,
                translateX: 0,
                translateY: 20,
                itemsSpacing: 0,
                itemWidth: 50,
                itemHeight: 10,
                itemTextColor: '#999',
                itemDirection: 'bottom-to-top',
                itemOpacity: 1,
                symbolSize: 18,
                symbolShape: 'circle',
                effects: [
                  {
                    on: 'hover',
                    style: {
                      itemTextColor: '#000'
                    }
                  }
                ]
              }
            ]}
            layers={['arcs', 'arcLabels', 'arcLinkLabels']}
          />
        </div>
      </div>
    </Paper>
  );
};

export default VulnerabilityPieChart;
