import React from 'react';
import { Link, useHistory } from 'react-router-dom';
import {
  Box,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip
} from '@mui/material';
import * as RiskStyles from './style';
import { getSeverityColor } from './utils';
import { Vulnerability } from 'types';

interface VulnerabilityCount extends Vulnerability {
  count: number;
}

const VulnerabilityCard = (props: {
  title: string;
  showLatest: boolean;
  showCommon: boolean;
  data: VulnerabilityCount[];
}) => {
  const history = useHistory();

  const { title, showLatest, showCommon, data } = props;
  const { cardRoot, cardSmall, cardTitle, seeAll, header, body, button } =
    RiskStyles.classesRisk;

  const truncateText = (text: string, len: number) => {
    if (text.length <= len) return text;
    return text.substring(0, len) + '...';
  };

  const seeAllLink = showLatest
    ? '/inventory/vulnerabilities?sort=createdAt&desc=false'
    : showCommon
    ? '/inventory/vulnerabilities/grouped'
    : '';

  const seeAllContent =
    showLatest || showCommon ? (
      <div className={seeAll}>
        <h4>
          <Link to={seeAllLink}>See All</Link>
        </h4>
      </div>
    ) : null;

  const domainDetailsLinkHandler = (domainDetailsLink: string) =>
    history.push(domainDetailsLink);

  const vulnerabilityGridContent =
    data?.length > 0 ? (
      data.slice(0, 4).map((vuln) => {
        const vulnDomain = vuln.domain ? '&domain=' + vuln.domain.name : '';
        const domainDetailsLink =
          '/inventory/vulnerabilities?title=' + vuln.title + vulnDomain;
        const ariaLabel = `A link to the details page for vulnerability ${vuln.title}.`;

        const onRowKeyDown = (event: React.KeyboardEvent) => {
          if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            domainDetailsLinkHandler(domainDetailsLink);
          }
        };

        return (
          <Tooltip
            title={
              <span className={cardTitle}>
                {truncateText(vuln.description, 120)}
              </span>
            }
            placement="right"
            arrow
            key={vuln.title}
          >
            <TableRow
              tabIndex={0}
              role="button"
              aria-label="view domain details"
              onClick={() => domainDetailsLinkHandler(domainDetailsLink)}
              onKeyDown={onRowKeyDown}
            >
              <TableCell scope="row" padding="none" align="center">
                {vuln.count}
              </TableCell>
              <TableCell scope="row" padding="none" align="center">
                {vuln.title}
              </TableCell>
              <TableCell scope="row" padding="none" align="center">
                <Box
                  component="p"
                  sx={{
                    borderBottom: `6px solid ${getSeverityColor({
                      id: vuln.severity ?? ''
                    })}`,
                    width: '80px',
                    display: 'inline-block'
                  }}
                >
                  {vuln.severity}
                </Box>
              </TableCell>
              <TableCell scope="row" padding="none" align="center">
                <button aria-label={ariaLabel} className={button}>
                  DETAILS
                </button>
              </TableCell>
            </TableRow>
          </Tooltip>
        );
      })
    ) : (
      <h3>No open vulnerabilities</h3>
    );

  return (
    <Paper elevation={0} className={cardRoot}>
      <div className={cardSmall}>
        {seeAllContent}
        <div className={header}>
          <h2>{title}</h2>
        </div>
        <div className={body}>
          <TableContainer>
            <Table size="small" aria-label="Latest vulnerabilities table">
              <TableHead>
                <TableRow>
                  <TableCell align="center">Count</TableCell>
                  <TableCell align="center">Vulnerability</TableCell>
                  <TableCell align="center">Severity</TableCell>
                  <TableCell align="center"> </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>{vulnerabilityGridContent}</TableBody>
            </Table>
          </TableContainer>
        </div>
      </div>
    </Paper>
  );
};

export default VulnerabilityCard;
