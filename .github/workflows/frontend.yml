---
name: Frontend Pipeline

on:
  push:
    branches:
      - develop
      - integration
    paths:
      - 'frontend/**'
      - 'docs/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches:
      - develop
      - integration
    paths:
      - 'frontend/**'
      - 'docs/**'
      - '.github/workflows/frontend.yml'

defaults:
  run:
    working-directory: ./frontend

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Test
        run: npm run test
  deploy_staging:
    needs: [lint, test]
    runs-on: ubuntu-latest
    environment: staging
    concurrency: '1'
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build Docs
        run: |
          cd ../docs
          npm ci
          npm run build
          cp -R public ../frontend/docs-build
      - name: Build Staging
        run: cp stage-cd.env .env && npm run build
      - name: Deploy Staging
        run: npx sls deploy --stage=staging-cd
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SLS_DEBUG: '*'
  deploy_integration:
    needs: [lint, test]
    runs-on: ubuntu-latest
    environment: integration
    concurrency: '1'
    if: github.event_name == 'push' && github.ref == 'refs/heads/integration'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install Frontend Dependencies
        run: npm ci
      - name: Install Docs Dependencies
        run: npm ci
        working-directory: ../docs
      - name: Build Docs
        run: npm run build
        working-directory: ../docs
      - name: Copy Docs to Frontend
        run: cp -R ../docs/public ../frontend/docs-build
      - name: Build Integration
        run: |
          cp integration.env .env
          npm run build
        working-directory: ./frontend
      - name: Debug Directory Structure After Build
        run: |
          ls -la ./frontend/docs-build
          ls -la ./frontend
      - name: Deploy Integration
        run: npx sls deploy --stage=integration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SLS_DEBUG: '*'