---
service: crossfeed

frameworkVersion: '3'
useDotenv: true
configValidationMode: error

custom:
  customDomain:
    domainName: ${file(env.yml):${self:provider.stage}.DOMAIN, ''}
    basePath: ''
    certificateName: ${file(env.yml):${self:provider.stage}.CERT_DOMAIN, ''}
    stage: ${self:provider.stage}
    createRoute53Record: false
  serverlessIfElse:
    - If: '"${file(env.yml):${self:provider.stage}.ENDPOINT_TYPE}" == "REGIONAL"'
      Exclude:
        - provider.vpcEndpointIds
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: true
    noDeploy:
      - boto3
      - botocore

provider:
  name: aws
  region: ${file(env.yml):${self:provider.stage}.REGION, ''}
  endpointType: ${file(env.yml):${self:provider.stage}.ENDPOINT_TYPE, ''}
  runtime: python3.11
  timeout: 30
  stage: ${opt:stage, 'dev'}
  environment: ${file(env.yml):${self:provider.stage}, ''}
  vpc: ${file(env.yml):${self:provider.stage}-vpc, ''}
  # NEED TO MAKE THIS AN IF/ELSE. Cause it's not needed in DMZ
  # vpcEndpointIds:
  #   - ${file(env.yml):${self:provider.stage}.VPC_ENDPOINT, ''}
  apiGateway:
    binaryMediaTypes:
      - image/*
      - font/*
    resourcePolicy:
      # This first block here needs to be an if/else too
      # - Effect: Deny
      #   Principal: '*'
      #   Action: 'execute-api:Invoke'
      #   Resource: 'execute-api:/${self:provider.stage}/*/*'
      #   Condition:
      #     StringNotEquals:
      #       'aws:sourceVpce': ${file(env.yml):${self:provider.stage}.VPC_ENDPOINT, ''}
      - Effect: Allow
        Principal: '*'
        Action: execute-api:Invoke
        Resource: execute-api:/${self:provider.stage}/*/*
        Condition:
          IpAddress:
            aws:SourceIp:
              - ${file(env.yml):${self:provider.stage}.DMZ_CIDR, ''}
  logs:
    restApi: true
  deploymentBucket:
    serverSideEncryption: AES256
  iam:
    role: arn:aws:iam::957221700844:role/crossfeed-integration-us-east-1-lambdaRole

resources:
  Conditions:
    IsDMZ:
      Fn::Or:
        - Fn::Equals:
            - ${self:provider.stage}
            - staging-cd
        - Fn::Equals:
            - ${self:provider.stage}
            - integration
  Resources:
    ShodanQueue:
      Type: AWS::SQS::Queue
      Condition: IsDMZ
      Properties:
        QueueName: ${self:provider.stage}-shodan-queue
        VisibilityTimeout: 18000  # 5 hours
        MaximumMessageSize: 262144  # 256 KB
        MessageRetentionPeriod: 604800  # 7 days
    DnstwistQueue:
      Type: AWS::SQS::Queue
      Condition: IsDMZ
      Properties:
        QueueName: ${self:provider.stage}-dnstwist-queue
        VisibilityTimeout: 18000  # 5 hours
        MaximumMessageSize: 262144  # 256 KB
        MessageRetentionPeriod: 604800  # 7 days
    IntelxQueue:
      Type: AWS::SQS::Queue
      Condition: IsDMZ
      Properties:
        QueueName: ${self:provider.stage}-intelx-queue
        VisibilityTimeout: 18000  # 5 hours
        MaximumMessageSize: 262144  # 256 KB
        MessageRetentionPeriod: 604800  # 7 days
    CybersixgillQueue:
      Type: AWS::SQS::Queue
      Condition: IsDMZ
      Properties:
        QueueName: ${self:provider.stage}-cybersixgill-queue
        VisibilityTimeout: 18000  # 5 hours
        MaximumMessageSize: 262144  # 256 KB
        MessageRetentionPeriod: 604800  # 7 days

functions:
  - ${file(./src/tasks/functions.yml)}
  - ${file(./src/api/functions.yml)}

plugins:
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-python-requirements
