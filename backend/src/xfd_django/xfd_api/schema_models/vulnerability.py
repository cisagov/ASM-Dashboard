"""Vulnerability schemas."""
# Third-Party Libraries
# from pydantic.types import UUID1, UUID
# Standard Python Libraries
from datetime import datetime
from typing import Any, List, Optional
from uuid import UUID

# Third-Party Libraries
from pydantic import BaseModel, Json


class Vulnerability(BaseModel):
    """Vulnerability schema."""

    id: UUID
    createdAt: datetime
    updatedAt: datetime
    lastSeen: Optional[datetime]
    title: Optional[str]
    cve: Optional[str]
    cwe: Optional[str]
    cpe: Optional[str]
    description: Optional[str]
    references: Optional[Any]
    cvss: Optional[float]
    severity: Optional[str]
    needsPopulation: bool
    state: Optional[str]
    substate: Optional[str]
    source: Optional[str]
    notes: Optional[str]
    actions: Optional[Any]
    structuredData: Optional[Any]
    isKev: bool
    domain_id: Optional[UUID]
    service_id: Optional[UUID]

    model_config = {"from_attributes": True}


class VulnerabilityFilters(BaseModel):
    """VulnerabilityFilters schema."""

    id: Optional[str] = None
    title: Optional[str] = None
    domain: Optional[str] = None
    severity: Optional[str] = None
    cpe: Optional[str] = None
    state: Optional[str] = None
    substate: Optional[str] = None
    organization: Optional[str] = None
    tag: Optional[str] = None
    isKev: Optional[bool] = None

    model_config = {"from_attributes": True}


class VulnerabilitySearch(BaseModel):
    """VulnerabilitySearch schema."""

    page: int = 1
    sort: Optional[str] = "ASC"
    order: Optional[str] = "id"
    filters: Optional[VulnerabilityFilters] = None
    pageSize: Optional[int] = 25
    groupBy: Optional[str] = None

    model_config = {"from_attributes": True}


class VulnerabilityStat(BaseModel):
    """VulnerabilityStat schema."""

    id: str
    value: int

    model_config = {"from_attributes": True}


class OrganizationResponse(BaseModel):
    id: UUID
    createdAt: datetime
    updatedAt: datetime
    acronym: Optional[str]
    name: str
    rootDomains: List[str]
    ipBlocks: List[str]
    isPassive: bool
    pendingDomains: Any
    country: Optional[str]
    state: Optional[str]
    regionId: Optional[str]
    stateFips: Optional[int]
    stateName: Optional[str]
    county: Optional[str]
    countyFips: Optional[int]
    type: Optional[str]

    model_config = {"from_attributes": True}


class DomainResponse(BaseModel):
    id: UUID
    createdAt: datetime
    updatedAt: datetime
    syncedAt: Optional[datetime]
    ip: Any
    fromRootDomain: Optional[str]
    subdomainSource: Optional[str]
    ipOnly: bool
    reverseName: Optional[str]
    name: Optional[str]
    screenshot: Optional[str]
    country: Optional[str]
    asn: Optional[str]
    cloudHosted: bool
    fromCidr: bool
    isFceb: bool
    ssl: Optional[Any]
    censysCertificatesResults: Optional[dict]
    trustymailResults: Optional[dict]
    organization: Optional[OrganizationResponse]

    model_config = {"from_attributes": True}


class ProductResponse(BaseModel):
    name: str
    version: Optional[str] = None

    model_config = {"from_attributes": True}


class ServiceResponse(BaseModel):
    id: UUID
    port: int
    lastSeen: Optional[datetime] = None
    products: Any
    serviceSource: Optional[str]
    service: Optional[str]
    banner: Optional[str]
    censysMetadata: Optional[dict]
    censysIpv4Results: Optional[dict]
    intrigueIdentResults: Optional[dict]
    shodanResults: Optional[dict]
    wappalyzerResults: Optional[List[Any]]

    model_config = {"from_attributes": True}


class GetVulnerabilityResponse(BaseModel):
    """Get a single vulnerability response model."""

    id: UUID
    createdAt: datetime
    updatedAt: datetime
    lastSeen: Optional[datetime]
    title: Optional[str]
    cve: Optional[str]
    cwe: Optional[str]
    cpe: Optional[str]
    description: Optional[str]
    references: Optional[List[Any]]
    cvss: Optional[float]
    severity: Optional[str]
    needsPopulation: bool
    state: Optional[str]
    substate: Optional[str]
    source: Optional[str]
    notes: Optional[str]
    actions: Optional[List[Any]]
    structuredData: Optional[Any]
    isKev: bool
    kevResults: Optional[dict]
    domain: Optional[DomainResponse]
    service: Optional[ServiceResponse]

    model_config = {"from_attributes": True}


class VulnerabilitySearchResponse(BaseModel):
    """List of Vulnerability objects."""

    result: List[GetVulnerabilityResponse]
    count: int

    model_config = {"from_attributes": True}


class VulnerabilityGroupResponse(BaseModel):
    group_field: Optional[str]
    cnt: int

    model_config = {"from_attributes": True}
